{
	"info": {
		"_postman_id": "796dab79-4236-4e39-8565-a3befa1c3f51",
		"name": "DEMO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44116803"
	},
	"item": [
		{
			"name": "robotcommands",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"// Test for status code",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 300ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"",
							"// Test for response body structure",
							"pm.test(\"Response is an array\", () => {",
							"    pm.expect(response).to.be.an('array');",
							"});",
							"",
							"// Test each command object in the response array",
							"response.forEach(command => {",
							"    pm.test(`Command with id ${command.id} has valid structure`, () => {",
							"        pm.expect(command).to.have.all.keys('id', 'name', 'description', 'isMoveCommand', 'createdDate', 'modifiedDate');",
							"        pm.expect(command.id).to.be.a('number');",
							"        pm.expect(command.name).to.be.a('string');",
							"        pm.expect(command.isMoveCommand).to.be.a('boolean');",
							"        pm.expect(command.createdDate).to.be.a('string');",
							"        pm.expect(command.modifiedDate).to.be.a('string');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/robotcommands",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robotcommands"
					]
				}
			},
			"response": []
		},
		{
			"name": "robotcommands/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"// Test for the presence of required fields in the response",
							"pm.test('Response contains required fields', function () {",
							"    pm.expect(response).to.have.all.keys('id', 'name', 'description', 'isMoveCommand', 'createdDate', 'modifiedDate');",
							"});",
							"",
							"// Test for valid data types of fields",
							"pm.test('Response fields have correct data types', function () {",
							"    pm.expect(response.id).to.be.a('number');",
							"    pm.expect(response.name).to.be.a('string');",
							"    pm.expect(response.description).to.satisfy(value => value === null || typeof value === 'string');",
							"    pm.expect(response.isMoveCommand).to.be.a('boolean');",
							"    pm.expect(new Date(response.createdDate)).to.be.a('date');",
							"    pm.expect(new Date(response.modifiedDate)).to.be.a('date');",
							"});",
							"",
							"// Test to ensure createdDate and modifiedDate are in the past",
							"pm.test('Dates are not in the future', function () {",
							"    const currentDate = new Date();",
							"    pm.expect(new Date(response.createdDate)).to.be.below(currentDate);",
							"    pm.expect(new Date(response.modifiedDate)).to.be.below(currentDate);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/robotcommands/2",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robotcommands",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "robotcommands",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"// Test for successful creation of the command",
							"pm.test(\"Response status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test for response body structure",
							"pm.test(\"Response body has required fields\", () => {",
							"    pm.expect(response).to.have.all.keys('id', 'name', 'description', 'isMoveCommand', 'createdDate', 'modifiedDate');",
							"});",
							"",
							"// Test for date formats in createdDate and modifiedDate",
							"const dateFormatRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}$/;",
							"",
							"pm.test(\"createdDate and modifiedDate are in valid format\", () => {",
							"    pm.expect(response.createdDate).to.match(dateFormatRegex);",
							"    pm.expect(response.modifiedDate).to.match(dateFormatRegex);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"MOVdE_FOfRWxgARD\",\n  \"description\": \"speedg=2\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/robotcommands",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robotcommands"
					]
				}
			},
			"response": []
		},
		{
			"name": "robotcommands/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify that the response status code is 204 (No Content)",
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Check that the response headers contain 'Date' and 'Server'",
							"pm.test(\"Response headers contain required fields\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"    pm.response.to.have.header(\"Server\");",
							"});",
							"",
							"// Measure response time and check if it's within acceptable limits (e.g., under 200ms)",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\":10,\n  \"name\": \"GO_FdORWARhD\",\n  \"description\": \"spheed=2\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/robotcommands/10",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robotcommands",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "robotcommands/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for successful deletion by checking status code",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Test for response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test for specific headers presence",
							"pm.test(\"Response has Date header\", function () {",
							"    pm.expect(pm.response.headers.has(\"Date\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has Server header\", function () {",
							"    pm.expect(pm.response.headers.has(\"Server\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Response has WWW-Authenticate header\", function () {",
							"    pm.expect(pm.response.headers.has(\"WWW-Authenticate\")).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/robotcommands/11",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"robotcommands",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "maps",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"// Check if the response is an array",
							"pm.expect(response).to.be.an('array');",
							"",
							"// Validate each map object in the response",
							"response.forEach(map => {",
							"    pm.expect(map).to.have.all.keys('id', 'name', 'rows', 'columns', 'isSquare');",
							"    pm.expect(map.id).to.be.a('number').and.to.be.greaterThan(0);",
							"    pm.expect(map.name).to.be.a('string').and.to.not.be.empty;",
							"    pm.expect(map.rows).to.be.a('number').and.to.be.greaterThan(0);",
							"    pm.expect(map.columns).to.be.a('number').and.to.be.greaterThan(0);",
							"    pm.expect(map.isSquare).to.be.a('boolean');",
							"});",
							"",
							"// Check if the 'rows' and 'columns' are equal for square maps",
							"response.forEach(map => {",
							"    if (map.isSquare) {",
							"        pm.expect(map.rows).to.equal(map.columns);",
							"    }",
							"});",
							"",
							"// Validate the response time",
							"pm.expect(pm.response.responseTime).to.be.below(200);",
							"",
							"// Check if Content-Type header is correct",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema matches the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.all.keys('id', 'name', 'rows', 'columns', 'isSquare');",
							"        pm.expect(item.id).to.be.a('number');",
							"        pm.expect(item.name).to.be.a('string');",
							"        pm.expect(item.rows).to.be.a('number');",
							"        pm.expect(item.columns).to.be.a('number');",
							"        pm.expect(item.isSquare).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'isSquare' is true for maps with equal rows and columns\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(map => {",
							"        pm.expect(map.isSquare).to.be.true;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Check for non-negative values for 'rows' and 'columns'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.rows).to.be.a('number').and.to.be.at.least(0, \"'rows' should be non-negative\");",
							"        pm.expect(item.columns).to.be.a('number').and.to.be.at.least(0, \"'columns' should be non-negative\");",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/maps",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "maps/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'rows', 'columns', 'isSquare');",
							"});",
							"",
							"",
							"pm.test(\"The Id must be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/maps/1",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "maps",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'rows', 'columns', 'isSquare');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id').that.is.a('number').and.is.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Name must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Rows and columns must be non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.rows).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.columns).to.be.a('number').and.to.be.at.least(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"myMhashdhp\",\n    \"rows\": 5,\n    \"columns\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/maps",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "maps/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response body must be empty (null)\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData).to.be.null;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 2,\n    \"name\": \"myMhjap\",\n    \"rows\": 5,\n    \"columns\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/maps/2",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "maps/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"});",
							"",
							"",
							"pm.test(\"Response has no content for a successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/maps/5",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"maps",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(user => {",
							"        pm.expect(user).to.have.all.keys('id', 'email', 'firstName', 'lastName', 'passwordHash', 'description', 'role', 'createdDate', 'modifiedDate');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'id' is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(user => {",
							"        pm.expect(user.email).to.exist;",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/users",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one user object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the user object schema\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(user => {",
							"        pm.expect(user).to.be.an('object');",
							"        pm.expect(user).to.have.all.keys('id', 'email', 'firstName', 'lastName', 'passwordHash', 'description', 'role', 'createdDate', 'modifiedDate');",
							"        ",
							"        pm.expect(user.id).to.be.a('number');",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"        pm.expect(user.firstName).to.be.a('string');",
							"        pm.expect(user.lastName).to.be.a('string');",
							"        pm.expect(user.passwordHash).to.be.a('string');",
							"        pm.expect(user.description).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(user.role).to.be.a('string');",
							"        pm.expect(user.createdDate).to.be.a('string');",
							"        pm.expect(user.modifiedDate).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email field is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(user => {",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/users/admin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id', 'email', 'firstName', 'lastName', 'passwordHash', 'description', 'role', 'createdDate', 'modifiedDate');",
							"});",
							"",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedDate and ModifiedDate are in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(new Date(responseData.createdDate).getTime()).to.not.be.NaN;",
							"    pm.expect(new Date(responseData.modifiedDate).getTime()).to.not.be.NaN;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/users/2",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id', 'email', 'firstName', 'lastName', 'passwordHash', 'description', 'role', 'createdDate', 'modifiedDate');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n    {\n        \"email\": \"admin@siuujjjbeds.com\",\n        \"firstName\": \"Adminn\",\n        \"lastName\": \"User\",\n        \"passwordHash\": \"hi\",\n        \"description\": null,\n        \"role\": \"Admin\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/users",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.equal(204);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response body is empty for 204 status code\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 3,\n  \"email\": \"updateduserd@example.com\",\n  \"FirstName\": \"hi\",\n  \"LastName\": \"llo\",\n  \"passwordHash\": \"newPlainPasswordOrAlreadyHashed\",\n  \"role\": \"Admin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/users/3",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"});",
							"",
							"",
							"pm.test(\"Response should have no content for a successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response body should be empty or null\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData).to.be.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/users/4",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.eql(204);",
							"});",
							"",
							"",
							"pm.test(\"Response has no content for successful PATCH request\", function () {",
							"    pm.expect(pm.response.code).to.equal(204);",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@sites.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "adminpass",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"updateduser@example.com\",\n    \"Password\": \"newPlainPasswordOrAlreadyHashed\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{api-host}}:{{port}}/api/users/3",
					"protocol": "http",
					"host": [
						"{{api-host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		}
	]
}